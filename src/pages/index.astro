---
import BasicLayout from "@/layouts/Basic.astro";
import IntroCard from "@/components/cards/IntroCard.astro";
import WorkCard from "@/components/cards/WorkCard.astro";
import MediaCard from "@/components/cards/MediaCard.astro";
import ListCard from "@/components/cards/ListCard.astro";
import CustomCard from "@/components/cards/CustomCard.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "@/consts";
import { getHomepageEntries } from "@/data/contentSources.js";

const homepageEntries = await getHomepageEntries();

const cards = Array.isArray(homepageEntries)
  ? homepageEntries.filter((entry) => entry?.type)
  : [];

function normaliseWorkTarget(value) {
  if (Array.isArray(value)) return value;
  if (typeof value !== "string") return undefined;

  try {
    const parsed = JSON.parse(value);
    if (Array.isArray(parsed)) return parsed;
  } catch (error) {
    // ignore JSON parse errors
  }

  const delimiters = ["|", "\n", ","];
  const delimiter = delimiters.find((sep) => value.includes(sep));
  if (delimiter) {
    return value
      .split(delimiter)
      .map((item) => item.trim())
      .filter(Boolean);
  }

  const trimmed = value.trim();
  return trimmed.length > 0 ? trimmed : undefined;
}
---

<BasicLayout
  title={SITE_TITLE}
  description={SITE_DESCRIPTION}
  image={`/thumbnails/index.jpg`}
>
  <main
    class="fade-in relative grid h-auto w-full grid-cols-1 items-center justify-items-center gap-y-[8vw] overflow-hidden p-[var(--page-margin)] py-20 sm:grid-cols-2"
  >
    <h1
      class="responsive-title fixed top-10 -z-10 w-full self-center leading-tight tracking-tighter sm:absolute"
    >
      <span>Munus</span>
      <span>Codes</span>
      <span>Zines,</span>
      <span>Design,</span>
      <span>Tools</span>
      <span>and</span>
      <span>Many</span>
      <span>More</span>
    </h1>

    {cards.map((entry, index) => {
      const type = entry.type?.toLowerCase?.() || "";
      const key = entry.order ?? index;

      if (["introcard", "intro"].includes(type)) {
        return (
          <IntroCard
            key={key}
            size={entry.size || "x2-card"}
            background={entry.background}
            textColor={entry.textColor}
            body={entry.body || entry.description || entry.text}
            linkContent={entry.linkContent || entry.linkLabel}
            linkLabel={entry.linkLabel}
            linkHref={entry.href || entry.link?.href}
          />
        );
      }

      if (["listcard", "list"].includes(type)) {
        const listTitle = entry.title || entry.heading || entry.listTitle;
        if (!listTitle) return null;
        return (
          <ListCard
            key={key}
            title={listTitle}
            background={entry.background}
            textColor={entry.textColor}
            body={entry.body || entry.description || entry.text}
          />
        );
      }

      if (["workcard", "work"].includes(type)) {
        const target = normaliseWorkTarget(entry.targetName);
        const href = entry.href || entry.link?.href || undefined;
        const description = entry.description || entry.excerpt || "";
        return (
          <WorkCard
            key={key}
            size={entry.size || "x2-card"}
            href={href}
            linkContent={entry.linkContent || entry.title || ""}
            targetName={target}
            description={description}
            iframe={entry.iframe}
            background={entry.background}
            textColor={entry.textColor}
          />
        );
      }

      if (["mediacard", "media"].includes(type)) {
        const target = Array.isArray(entry.targetName)
          ? entry.targetName[0]
          : entry.targetName;
        return (
          <MediaCard
            key={key}
            size={entry.size || "x1-card"}
            title={entry.title}
            targetName={target}
            description={entry.description || ""}
            iframe={entry.iframe}
            height={entry.height}
            background={entry.background}
            textColor={entry.textColor}
          />
        );
      }

      if (["customcard", "custom"].includes(type)) {
        const target = Array.isArray(entry.targetName)
          ? entry.targetName[0]
          : entry.targetName;
        return (
          <CustomCard
            key={key}
            size={entry.size || "x2-card"}
            title={entry.title}
            body={entry.body || entry.description || entry.text}
            background={entry.background}
            textColor={entry.textColor}
            linkHref={entry.href || entry.link?.href}
            linkContent={entry.linkContent}
            linkLabel={entry.linkLabel}
            targetName={target}
            iframe={entry.iframe}
            height={entry.height}
          />
        );
      }

      return null;
    })}
  </main>
</BasicLayout>
<script>
  import { gsap } from "gsap";

  class ParallaxEffect {
    constructor(cardsSelector) {
      this.cards = document.querySelectorAll(cardsSelector);
      this.cardOffsets = [];
      this.isThrottled = false;

      // Bind methods once to preserve references
      this.boundCheckScreenSize = this.checkScreenSize.bind(this);
      this.boundThrottleParallax = this.throttleParallax.bind(this);

      this.init();
    }

    init() {
      this.checkScreenSize(); // Setup on load
      window.addEventListener("resize", this.boundCheckScreenSize);
    }

    cardOffset() {
      this.cardOffsets = []; // Clear previous offsets to avoid duplication
      this.cards.forEach((div, index) => {
        const randX =
          index % 3 === 2 ? Math.random() * -10 : Math.random() * 20;
        const randY = index % 2 === 0 ? Math.random() * 40 : Math.random() * 20;

        this.cardOffsets.push({ randX, randY });

        gsap.set(div, {
          xPercent: randX,
          yPercent: randY,
          duration: 0.5,
          ease: "power2.out",
        });
      });
    }

    throttleParallax(e) {
      if (this.isThrottled) return;

      this.isThrottled = true;
      requestAnimationFrame(() => this.parallax(e));
      setTimeout(() => {
        this.isThrottled = false;
      }, 16); // ~60 FPS
    }

    parallax(e) {
      const { clientX, clientY } = e;
      const { innerWidth, innerHeight } = window;
      const offsetX = (clientX / innerWidth - 0.5) * 5;
      const offsetY = (clientY / innerHeight - 0.5) * 5;

      this.cards.forEach((div, index) => {
        const { randX, randY } = this.cardOffsets[index];

        gsap.to(div, {
          xPercent: randX + offsetX,
          yPercent: randY + offsetY,
          duration: 0.3,
          ease: "power2.out",
        });
      });
    }

    removeTransform() {
      this.cards.forEach((div) => {
        gsap.set(div, { clearProps: "transform", duration: 0.3 });
      });
    }

    removeParallax() {
      document.removeEventListener("mousemove", this.boundThrottleParallax);
    }

    checkScreenSize() {
      const screenWidth = window.innerWidth;

      if (screenWidth < 768) {
        this.removeParallax();
        this.removeTransform();
      } else {
        this.cardOffset();
        this.removeParallax(); // Prevent double binding
        document.addEventListener("mousemove", this.boundThrottleParallax);
      }
    }
  }

  const parallax = new ParallaxEffect(".home-card");
</script>
