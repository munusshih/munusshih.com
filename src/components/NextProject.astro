---
import { getCollection } from "astro:content";
import { sortByDate } from "@/scripts/cleanDate";
import Media from "@/components/utils/Media.astro";
const allProjects = await getCollection("work");
// Only show projects that explicitly have archived: false
const activeProjects = allProjects.filter(
  (project) => project.data.archived === false
);
const sortedActiveProjects = sortByDate(activeProjects, "desc");

const { slug } = Astro.params;
const currentIndex = sortedActiveProjects.findIndex((p) => p.id === slug);

// If current project is not in active projects, find next from active projects
let nextProject;
if (currentIndex === -1) {
  // Current project might be archived, so just show first active project
  nextProject =
    sortedActiveProjects.length > 0 ? sortedActiveProjects[0] : null;
} else {
  // Get next active project in sequence
  nextProject =
    sortedActiveProjects[(currentIndex + 1) % sortedActiveProjects.length];
  // Make sure we don't show the same project
  if (nextProject && nextProject.id === slug) {
    nextProject = null;
  }
}
---

{
  nextProject && (
    <div class="x1-card float-right">
      <div class="hover-animate fade-in m-[var(--page-margin)] mt-20 gap-4 overflow-hidden pt-4">
        <a
          class="flex flex-col gap-4 pt-2 !no-underline"
          href={`${nextProject.id}`}
        >
          <div class="relative ml-4 flex h-20 w-20 items-center justify-end overflow-hidden">
            <svg
              class="next-arrow absolute"
              xmlns="http://www.w3.org/2000/svg"
              width="100"
              height="100"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <line x1="5" y1="12" x2="19" y2="12" />
              <polyline points="12 5 19 12 12 19" />
            </svg>
          </div>

          <div class="grid grid-cols-2">
            <div>
              <h2 class="body1 content-text mb-2 px-[var(--page-margin)]">
                Next Project
              </h2>
              <h3 class="heading2 flex w-full flex-row justify-between px-[var(--page-margin)] pb-2 text-balance">
                {nextProject.data.title}
              </h3>
            </div>
            <div class="flex items-center justify-center">
              <Media
                src={nextProject.data.heroImage || nextProject.data.images[0]}
                isVideo={nextProject.data.heroImage?.match(
                  /\.(mp4|webm|ogg)$/i
                )}
              />
            </div>
          </div>
        </a>
      </div>
    </div>
  )
}

<script>
  import { gsap } from "gsap";

  const link = document.querySelector(".hover-animate");
  const image = link.querySelector("video");
  const content = link.querySelector(".content-text");
  const arrow = document.querySelector(".next-arrow");

  let hoverTween;
  const distance = 80;
  const targets = [image, content, link];

  function animateHover(up = true) {
    gsap.to(targets, {
      y: up ? -10 : 0,
      scale: (i, el) => (el === image ? (up ? 1.1 : 1) : 1),
      duration: 0.3,
      ease: "power2.out",
      overwrite: "auto",
    });
  }

  link.addEventListener("mouseenter", () => {
    animateHover(true);

    if (hoverTween) hoverTween.kill();

    hoverTween = gsap.fromTo(
      arrow,
      { x: -distance },
      {
        x: distance,
        duration: 1,
        ease: "none",
        repeat: -1,
        overwrite: "auto",
      }
    );
  });

  link.addEventListener("mouseleave", () => {
    animateHover(false);

    if (hoverTween) hoverTween.kill();

    gsap.to(arrow, {
      x: 0,
      duration: 0.3,
      ease: "power2.out",
      overwrite: "auto",
    });
  });
</script>
