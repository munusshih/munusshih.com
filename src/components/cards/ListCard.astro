---
const { title, background: backgroundProp, textColor, body } = Astro.props;
import DraggableCard from "@/components/global/DraggableCard.astro";
import Media from "@/components/utils/Media.astro";
import { marked } from "marked";
import { parseLooseDate, prepareAndSortContent } from "@/scripts/cleanDate.js";
import {
  getPressEntries,
  getEventEntries,
  getBookEntries,
} from "@/data/contentSources.js";

const backgroundColors = {
  "Upcoming Events": "#FFBF00",
  "Recent Press": "#6DE7FF",
  Readings: "#FF876D",
};

let background = backgroundColors[title] || "white";
if (backgroundProp) background = backgroundProp;
const cardTextColor = textColor || "black";
let bodyItems = [];
let bodyListType = "ul";

if (body) {
  bodyItems = body
    .split(/\n+/)
    .map((item) => item.trim())
    .filter(Boolean);

  if (bodyItems.length > 0) {
    const isOrdered = bodyItems.every((item) => /^\d+\.\s+/.test(item));
    const isBulleted = bodyItems.every((item) => /^[-*+]\s+/.test(item));

    if (isOrdered) {
      bodyListType = "ol";
      bodyItems = bodyItems.map((item) => item.replace(/^\d+\.\s+/, ""));
    } else if (isBulleted) {
      bodyListType = "ul";
      bodyItems = bodyItems.map((item) => item.replace(/^[-*+]\s+/, ""));
    }
  }
}

// Book data loader
async function getBookData(contentArray) {
  async function fetchGoogleBooksInfo(isbn) {
    const url = `https://www.googleapis.com/books/v1/volumes?q=isbn:${isbn}`;
    const res = await fetch(url);
    if (!res.ok) return null;
    const data = await res.json();
    if (data.totalItems === 0) return null;

    const volume = data.items[0].volumeInfo;

    return {
      title: volume.title || "Untitled",
      link: volume.infoLink || null,
      image: volume.imageLinks?.thumbnail?.replace(/^http:/, "https:") || null,
      date: volume.publishedDate || null,
    };
  }

  const fetches = contentArray.map(async (item) => {
    const isbn = item.isbn;
    if (!isbn) return item;

    const bookInfo = await fetchGoogleBooksInfo(isbn);
    if (!bookInfo) return item;

    return {
      ...item,
      title: bookInfo.title || item.title || "Untitled",
      link: {
        href: bookInfo.link || `https://books.google.com/books?isbn=${isbn}`,
      },
      image: bookInfo.image,
      date: bookInfo.date || item.date || null,
    };
  });

  return Promise.all(fetches);
}

// Main content logic
let contentArray = [];

if (title === "Recent Press") {
  const pressEntries = await getPressEntries();
  contentArray = prepareAndSortContent(pressEntries).slice(0, 3);
} else if (title === "Upcoming Events") {
  const eventEntries = await getEventEntries();
  const upcoming = eventEntries.filter(({ date }) => {
    if (!date) return false;
    const parsed = parseLooseDate(date);
    return parsed instanceof Date && !isNaN(parsed) && parsed > new Date();
  });
  contentArray = prepareAndSortContent(upcoming);
} else if (title === "Readings") {
  const bookEntries = await getBookEntries();
  const base = prepareAndSortContent(bookEntries.slice(0, 2));
  contentArray = await getBookData(base);
}
---

<DraggableCard>
  <details
    class={`home-card max-w-[800px] x2-card flex flex-col justify-between p-4`}
    style={`background: ${background}; color: ${cardTextColor};`}
    open
  >
    <summary class="flex items-center justify-between">
      <h2 class="heading1 mb-4">{title}</h2>
      <span class="arrow code cursor-pointer transition-transform duration-300">
        <span class="code inline-block scale-y-[1.5]">â–¶</span>
      </span>
    </summary>
    {
      contentArray?.length > 0 ? (
        <ul class="w-full border-t pb-2">
          {contentArray.map((item, index) => (
            <li key={index} class="border-b py-2 pb-4">
              <div class="mb-2 grid w-full grid-cols-5">
                {item.title && (
                  <div class="body1 col-span-3 flex flex-row gap-4">
                    {item.link?.href ? (
                      <a
                        href={item.link.href}
                        class="linkout body1"
                        target="_blank"
                      >
                        {item.title}
                      </a>
                    ) : (
                      item.title
                    )}
                    {item.image && (
                      <div class="w-20">
                        <Media
                          src={item.image}
                          alt={item.title}
                          isVideo={false}
                        />
                      </div>
                    )}
                  </div>
                )}

                {item.date && (
                  <h4 class="body1 col-span-2 text-right">{item.date}</h4>
                )}
              </div>
              {item.quote && <p class="code body2">{item.quote}</p>}
            </li>
          ))}
        </ul>
      ) : bodyItems.length > 0 ? (
        bodyListType === "ol" ? (
          <ol class="listcard-body w-full border-t pb-2">
            {bodyItems.map((item, index) => (
              <li
                key={index}
                class="border-b py-2 pb-4"
                set:html={marked.parseInline(item)}
              />
            ))}
          </ol>
        ) : (
          <ul class="listcard-body w-full border-t pb-2">
            {bodyItems.map((item, index) => (
              <li
                key={index}
                class="border-b py-2 pb-4"
                set:html={marked.parseInline(item)}
              />
            ))}
          </ul>
        )
      ) : (
        <div class="flex h-full w-full items-center justify-center">
          <h3 class="heading2">No content available yet!</h3>
        </div>
      )
    }
  </details>
  <style>
    .arrow {
      display: inline-block;
      transition: transform 0.5s ease;
      margin-bottom: 10px;
    }

    details[open] .arrow {
      transform: rotate(90deg); /* Rotate the arrow when open */
    }

    .listcard-body {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .listcard-body ol {
      margin: 0;
      padding-left: 1.5rem;
      list-style: decimal;
    }

    .listcard-body ul {
      margin: 0;
      padding-left: 1.5rem;
      list-style: none;
    }

    .listcard-body ul li {
      position: relative;
      padding-left: 0.5rem;
    }

    .listcard-body ul li::before {
      position: absolute;
      left: -1.2rem;
      content: "-";
    }
  </style>
</DraggableCard>
