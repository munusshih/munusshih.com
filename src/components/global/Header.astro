---
import HeaderLink from "./HeaderLink.astro";
import HeroSketch from "@/components/global/HeroSketch.astro";
import { SITE_DESCRIPTION, SITE_TITLE, NEWS } from "@/consts";

import { marked } from "marked";

const base = import.meta.env.BASE_URL;
const currentPage = Astro.url.pathname; // Get the current page's pathname

const navigationList = [
  { label: "Home", href: "/" },
  { label: "About", href: "/about" },
  { label: "Work", href: "/work" },
  { label: "Teach", href: "/teach" },
  { label: "Laboratory", href: "/lab" },
];
---

<header
  class="body1 fade-in fixed top-0 z-10 w-full bg-white px-[var(--page-margin)] py-4 pt-[var(--page-margin)] md:pt-4 2xl:py-6"
>
  <!-- Hidden checkbox controls menu visibility -->
  <input
    type="checkbox"
    id="nav-toggle"
    class="peer hidden"
    aria-hidden="true"
  />

  <div class="flex flex-row items-center justify-between">
    <h1 class="heading2 font-bold tracking-tight">
      <a href="/" class="!no-underline hover:text-gray-400">Munus Shih</a>
    </h1>

    <!-- Menu toggle label, acts as a button -->
    <label
      for="nav-toggle"
      class="heading2 z-50 cursor-pointer"
      role="button"
      tabindex="0"
      aria-controls="main-navigation"
      aria-expanded="false"
    >
      Menu
    </label>
  </div>

  <nav
    id="main-navigation"
    role="navigation"
    aria-label="Main navigation"
    class="pointer-events-none absolute inset-0 z-[999] hidden h-screen w-full flex-col items-center justify-center bg-black text-white opacity-0 transition-all duration-300 peer-checked:pointer-events-auto peer-checked:flex peer-checked:opacity-100"
  >
    <ul class="menu-textsize flex flex-col items-center justify-center gap-4">
      {
        navigationList.map((item) => (
          <li>
            <a
              href={item.href}
              class={`!no-underline hover:text-gray-400 ${currentPage.startsWith(item.href) ? "text-gray-300" : ""}`}
            >
              {item.label}
            </a>
          </li>
        ))
      }

      <!-- Close button label -->
      <label
        for="nav-toggle"
        class="heading2 absolute top-[var(--page-margin)] right-[var(--page-margin)] cursor-pointer hover:text-gray-400"
        role="button"
        tabindex="0"
      >
        Close
      </label>
    </ul>
  </nav>
</header>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const navToggle = document.querySelector("#nav-toggle");

  const header = document.querySelector("header");

  ScrollTrigger.create({
    start: 0,
    end: "max",
    onUpdate: ({ direction, scroll }) => {
      if (navToggle.checked) return;

      const yTarget = direction === -1 ? 0 : -header.offsetHeight;
      gsap.to(header, {
        y: yTarget,
        duration: 0.5,
        ease: "power2.out",
        overwrite: "auto",
      });

      header.classList.toggle("shadow-md", scroll() > 0);
    },
  });

  document.querySelectorAll('label[for="nav-toggle"]').forEach((label) => {
    label.addEventListener("keydown", (e) => {
      if (e.key === " " || e.key === "Enter") {
        e.preventDefault();
        const checkbox = document.getElementById("nav-toggle");
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event("change"));
      }
    });
  });

  document.addEventListener("keydown", (e) => {
    if (e.key !== "Tab") return;

    const checkbox = document.getElementById("nav-toggle");
    if (!checkbox.checked) return; // only trap focus when menu is open

    const nav = document.getElementById("main-navigation");
    const focusable = nav.querySelectorAll(
      'a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"])'
    );
    if (focusable.length === 0) return;

    const first = focusable[0];
    const last = focusable[focusable.length - 1];
    const active = document.activeElement;

    if (e.shiftKey) {
      // Shift + Tab
      if (active === first) {
        e.preventDefault();
        last.focus();
      }
    } else {
      // Tab
      if (active === last) {
        e.preventDefault();
        first.focus();
      }
    }
  });
</script>
